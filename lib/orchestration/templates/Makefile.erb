.PHONY: start stop migrate docker build push start logs compose config <%= (test_wait_commands + production_wait_commands).uniq.join(' ') %>

### Environment setup ###

DOCKER_USERNAME:=$(shell bash ./<%= env.orchestration_dir_name %>/yaml.bash docker_username)
DOCKER_REPOSITORY:=$(shell bash ./<%= env.orchestration_dir_name %>/yaml.bash docker_repository)

COMPOSE_BASE:=HOST_UID=$(shell id -u) \
              DOCKER_USERNAME=${DOCKER_USERNAME} \
              DOCKER_REPOSITORY=${DOCKER_REPOSITORY} \
              docker-compose \
              -p $(shell bash ./<%= env.orchestration_dir_name %>/yaml.bash docker_repository) \
              -f orchestration/docker-compose.yml

COMPOSE_PRODUCTION:=-f orchestration/docker-compose.production.yml -f orchestration/docker-compose.override.yml
COMPOSE_TEST:=-f orchestration/docker-compose.test.yml -f orchestration/docker-compose.override.yml
COMPOSE_DEVELOPMENT:=-f orchestration/docker-compose.development.yml -f orchestration/docker-compose.override.yml

ifeq ($(RAILS_ENV),)
  ENV:=development
else
  ENV:=$(RAILS_ENV)
endif

COMPOSE:=${COMPOSE_BASE} -f orchestration/docker-compose.$(ENV).yml -f orchestration/docker-compose.override.yml

### Container management commands ###

start:
	@echo "Starting containers..."
ifeq (${ENV},$(filter ${ENV},test development))
	@${COMPOSE} up -d
else
	@${COMPOSE} up -d --scale application=$${INSTANCES:-1}
endif
	@make wait

stop:
	@echo "Stopping containers..."
	@${COMPOSE} down
	@echo "All containers stopped."

logs:
	@${COMPOSE} logs

config:
	@${COMPOSE} config

compose:
	@${COMPOSE} $$cmd

### Database utility commands ###

migrate: wait-database
	@echo "Running migrations..."
ifeq (${ENV},production)
	@${COMPOSE} run application bundle exec rake db:migrate RAILS_ENV=${ENV}
else
	@bundle exec rake db:migrate RAILS_ENV=${ENV}
endif
	@echo "Migrations complete."

### Service healthcheck commands ###

wait: <%= production_wait_commands.join(' ') %>
	@echo "All Containers ready."

wait-test: <%= test_wait_commands.join(' ') %>
	@echo "All Containers ready."

wait-application:
	@bin/rake orchestration:application:wait

wait-database:
	@bin/rake orchestration:database:wait

wait-mongo:
	@bin/rake orchestration:mongo:wait

wait-nginx-proxy:
	@bin/rake orchestration:nginx_proxy:wait

wait-rabbitmq:
	@bin/rake orchestration:rabbitmq:wait

### Docker build commands ###

docker: build push

GIT_BRANCH:=$(if $(BRANCH),$(BRANCH),$(shell git rev-parse --abbrev-ref HEAD))

build:
	@echo "Preparing build from ${GIT_BRANCH}"
	@mkdir -p ./<%= env.orchestration_dir_name %>/.build
	@git show ${GIT_BRANCH}:./Gemfile > ./<%= env.orchestration_dir_name %>/.build/Gemfile
	@git show ${GIT_BRANCH}:./Gemfile.lock > ./<%= env.orchestration_dir_name %>/.build/Gemfile.lock
	<% if defined?(Webpacker) %>@git show ${GIT_BRANCH}:./package.json > ./<%= env.orchestration_dir_name %>/.build/package.json<% end %>
	<% if defined?(Webpacker) %>@git show ${GIT_BRANCH}:./yarn.lock > ./<%= env.orchestration_dir_name %>/.build/yarn.lock<% end %>
	@echo "Building..."
	@git archive --format tar.gz -o ./<%= env.orchestration_dir_name %>/.build/context.tar.gz ${GIT_BRANCH}
	@docker build \
	             --build-arg BUNDLE_GITHUB__COM \
	             --build-arg BUNDLE_BITBUCKET__ORG \
		     -t ${DOCKER_USERNAME}/${DOCKER_REPOSITORY} \
		     -t ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:$(shell git rev-parse --short --verify ${GIT_BRANCH}) \
		     ./<%= env.orchestration_dir_name %>/
	@echo "Build complete."

push: VERSION := $(shell git rev-parse --short --verify ${GIT_BRANCH})
push:
	docker push ${DOCKER_USERNAME}/${DOCKER_REPOSITORY}:${VERSION}
