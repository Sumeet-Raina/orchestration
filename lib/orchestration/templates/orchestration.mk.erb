### Environment setup ###
SHELL:=/bin/bash

<%= macros %>

ifdef env_file
  -include ${env_file}
else
  -include .env
endif

export

ifneq (,$(env))
  env:=$(env)
else ifneq (,$(RAILS_ENV))
  env:=$(RAILS_ENV)
else ifneq (,$(RACK_ENV))
  env:=$(RACK_ENV)
else
  env:=development
endif

DOCKER_TAG ?= latest

ifneq (,$(wildcard ./bin/rake))
  rake:=RACK_ENV=${env} RAILS_ENV=${env} bin/rake
else ifneq (,$(wildcard ./Gemfile))
  rake:=RACK_ENV=${env} RAILS_ENV=${env} bundle exec rake
else
  rake:=RACK_ENV=${env} RAILS_ENV=${env} rake
endif

docker_organization:=$(shell bash ${orchestration_dir}/yaml.bash docker_organization)
docker_repository:=$(shell bash ${orchestration_dir}/yaml.bash docker_repository)

compose_base:=env HOST_UID=$(shell id -u) \
              DOCKER_ORGANIZATION="${docker_organization}" \
              DOCKER_REPOSITORY="${docker_repository}" \
              docker-compose \
              -p "${docker_repository}_${env}" \
              -f "${orchestration_dir}/docker-compose.yml"

git_branch ?= $(if $(branch),$(branch),$(shell git rev-parse --abbrev-ref HEAD))
git_version ?= $(shell git rev-parse --short --verify ${git_branch})
docker_image:=${docker_organization}/${docker_repository}:${git_version}

compose=${compose_base} -f ${orchestration_dir}/docker-compose.${env}.yml -f ${orchestration_dir}/docker-compose.override.yml
random_str=cat /dev/urandom | LC_ALL=C tr -dc 'a-z' | head -c $1
ifneq (,$(wildcard ./.env))
  env_volume:=--volume '${orchestration_dir}/../.env:/app/.env:ro'
endif

ifneq (,$(wildcard config/database.yml))
  env_volume:=--volume '${pwd}/.env:/app/.env:ro'
endif

ifeq (${database_enabled},1)
  database_config_volume:=--volume '${pwd}/config/database.yml:/app/config/database.yml:ro'
  database_migrations_volume:=--volume '${pwd}/db/:/app/db/:ro'
endif

default_network:=${docker_repository}_${env}_default
mount_path:=/app/orchestration.$(shell $(call random_str,16))
toolkit_container_run:=docker run --rm \
                                  --volume '${orchestration_dir}:${mount_path}:ro' \
                                  --volume '${orchestration_config}:/app/${orchestration_config_filename}:ro' \
                                  ${env_volume} \
                                  ${database_config_volume} \
                                  ${database_migrations_volume} \
                                  --network '${default_network}' \
                                  --env 'TERM' \
                                  'rubyorchestration/toolkit'

toolkit=${toolkit_container_run} 'make' '-f' '${mount_path}/Makefile' $1 mounted_orchestration='${mount_path}' git_branch='${git_branch}' git_version='${git_version}'

app_container_run:=${compose} run --rm ${env_volume} --volume '${orchestration_dir}:${mount_path}:ro' app
app_container_make:=${app_container_run} make -f '${mount_path}/Makefile' mounted_orchestration='${mount_path}'

ifneq (,$(wildcard ${orchestration_dir}/docker-compose.local.yml))
  compose:=${compose} -f ${orchestration_dir}/docker-compose.local.yml
endif

### Container management commands ###

.PHONY: start
start:
	@$(call print,'${yellow}Starting containers${reset} ...')
ifeq (${env},$(filter ${env},test development))
	@${compose} up -d --force-recreate ${services} ${log_progress} || ${fail}
	@[ '${is_container}' == '1' ] && \
         ( \
           docker network connect '${network}' '$(shell hostname)' ${log} \
           || \
           $(call println,'${yellow}Warning${reset}: Unable to join network: "${yellow}${network}${reset}". Container will not be able to connect to dependency services.') \
         ) \
         || ( [ '${is_container}' == '0' ] || ${fail} )
else
	@${compose} up -d --scale app=$${instances:-1} ${services} ${log_progress} || ${fail}
endif
	@$(call printrawln,' ${green}started${reset} ${tick}')
	@$(call println,'${yellow}Waiting for services to become available${reset} ...')
ifdef services
	@$(call make,wait services='${services}') 2>${stderr} || ${fail}
else
	@$(call make,wait) 2>${stderr} || ${fail}
endif

<% services.each do |service| %>
.PHONY: start-<%= service %>
start-<%= service %>:
	@$(call make,start services='<%= service %>')

<% end %>

.PHONY: stop
stop:
	@$(call print,'${yellow}Stopping containers${reset} ...')
	@if docker ps --format "{{.ID}}" | grep -q $(shell hostname) ; \
          then \
            ( ${compose} down ${log_progress} || ${fail} ) \
            && \
            ( docker network connect ${docker_repository}_${env}_default $(shell hostname) ${log} || : ) ; \
          else \
            ${compose} down ${log_progress} || ${fail} ; \
          fi
	@$(call printrawln,' ${green}stopped${reset}. ${tick}')

.PHONY: logs
logs:
	@${compose} logs -f

.PHONY: config
config:
	@${compose} config

.PHONY: compose
compose:
	@echo ${compose}

### Development/Test Utility Commands

.PHONY: serve
serve: env_file ?= ./.env
serve: rails := RAILS_ENV='${env}' bundle exec rails server
serve: _verify_env
	@if [ "${custom_env_file}" == "1" ] && [ ! -f "${env_file}" ] ; \
         then \
           $(call println,'${red}Error${reset}: Environment file "${yellow}${env_file}${reset}" not found. ${cross}') ; \
           ${fail} ; \
         fi
	@if [ -f "${env_file}" ] ; \
         then ( \
                $(call println,'${yellow}Environment${reset}: ${green}${env_file}${reset}') && \
                cat '${env_file}' | ${format_env} && \
                $(call println,'') && \
                set -a && . '${env_file}' && set +a && \
                ${rails} \
            ) ; \
         else ${rails} ; \
         fi

.PHONY: test-setup
test-setup:
	@$(call make,start migrate env=test)

.PHONY: dump
dump:
	@$(call println)
	@$(call println,'${yellow}Captured${reset} ${green}stdout${reset} ${yellow}and${reset} ${red}stderr${reset} ${yellow}log data${reset}:')
	@$(call println)
	@echo
	@test -f '${stdout}' && ( \
          $(call hr,${green}) ; \
          $(call println,'${gray}${stdout}${reset}') ; \
          $(call hr,${green}) ; \
          echo ; cat '${stdout}' ; echo ; \
          $(call hr,${green}) ; \
        )

	@test -f '${stdout}' && ( \
          echo ; \
          $(call hr,${red}) ; \
          $(call println,'${gray}${stderr}${reset}') ; \
          $(call hr,${red}) ; \
          echo ; cat '${stderr}' ; echo ; \
          $(call hr,${red}) ; \
        )

### Deployment utility commands ###

.PHONY: bundle
bundle:
ifndef path
	@$(warning Missing `path` parameter; using `./bundle.tar`. Set a custom path with `make bundle path=/tmp/bundle.tar`)
endif
	@rm -rf ${orchestration_dir}/.deploy/
	@mkdir -p ${orchestration_dir}/.deploy/${docker_repository}/
	@sed -e "s/%%VERSION%%/${git_version}/g" \
             -e "s/%%REPOSITORY%%/${docker_repository}/g" \
             -e "s/%%ORGANIZATION%%/${docker_organization}/g" \
             ${orchestration_dir}/deploy.mk > \
             ${orchestration_dir}/.deploy/${docker_repository}/Makefile
	@cp ${orchestration_dir}/docker-compose.yml \
            ${orchestration_dir}/docker-compose.production.yml \
            ${orchestration_dir}/docker-compose.override.yml \
            ${orchestration_dir}/.deploy/${docker_repository}/
	@bundle_path="${path}" ; tar -C '${orchestration_dir}/.deploy' -cf "$${bundle_path:-./bundle.tar}" ./${docker_repository}

.PHONY: deploy
ifndef manager
	@$(error Missing `manager` parameter: `make deploy manager=swarm-manager.example.com`)
endif
deploy: env := production
deploy: project_name := ${docker_repository}_${env}
deploy: path := $(shell mktemp -d)
deploy: RAILS_ENV = ${env}
deploy: RACK_ENV = ${env}
deploy: DOCKER_TAG = ${git_version}
deploy:
	@$(call println,'${yellow}Deploying stack via${reset} ${green}${manager}${reset} ...') && \
          ( \
            $(call make,_verify_compose env_file=${env_file} env=${env}) && \
            $(call make,bundle path='${path}/bundle.tar') ${log} && \
            cd '${path}' ${log} && \
            tar xf './bundle.tar' ${log} && \
            cd '${docker_repository}' ${log} && \
               ( [ -z '${env_file}' ] || cp '${env_file}' './.env' ${log} ) && \
               $(call println,'${yellow}Deployment environment${reset}:') && \
               cat '.env' | ${format_env} && \
               echo 'DOCKER_ORGANIZATION=${docker_organization}' >> './.env' && \
               echo 'DOCKER_REPOSITORY=${docker_repository}' >> './.env' && \
               echo 'DOCKER_TAG=${git_version}' >> ./.env && \
               $(call println,'') && \
               $(call println,'${yellow}Application image${reset}: ${cyan}${docker_image}${reset}') && \
               ${compose} config 2>${stderr} | ssh "${manager}" 'docker stack deploy --prune --with-registry-auth -c - "${project_name}"' ${log} && \
            ( [ -z "${path}" ] || rm -rf "${path}" ${log} ) \
          ) \
          || ${fail}

	@$(call println,'${yellow}Deployment${reset} ${green}complete${reset}. ${tick}')

### Database utility commands ###

.PHONY: migrate
migrate: success := $(call printrawln,'${green}complete${reset}. ${tick}')
migrate: start-database
ifeq (,$(wildcard config/database.yml))
	@$(call println,'${yellow}No database configuration found${reset}: ${cyan}skipping migrations${reset} ... ${tick}')
else
	@$(call make,_verify_compose env=${env} env_file=${env_file}) || ${fail}
	@$(call print,'[${green}toolkit${reset}] ${yellow}Running migrations${reset} ... ')
	@${replace_env}
	@${toolkit} _migrate env=${env} ${log_progress} || ${fail}
	@${restore_env}
	@${success}
endif

### Service healthcheck commands ###

.PHONY: wait
<% services.each do |service| %>
ifneq (,$(findstring <%= service %>,${services}))
wait: wait-<%= service %>
endif
<% end %>
ifndef services
wait: <%= services.map { |command| "wait-#{command}" }.join(' ') %>
endif
	@$(call println,'${yellow}All services${reset} ${green}ready${reset}. ${tick}')

## Generic Listener healthcheck for TCP services ##

wait-listener:
	@${rake} orchestration:listener:wait service=${service}

## Test/development wait commands

<% services.each do |service| %>
<% next if service.to_sym == :app %>
.PHONY: wait-<%= service %>
wait-<%= service %>:
ifdef toolkit
	@${rake} orchestration:<%= service %>:wait
else
	@$(call toolkit,'wait-<%= service %>' 'toolkit=1')
endif

<% end %>

.PHONY: wait-app
wait-app:
	@# no-op

### Docker build commands ###

.PHONY: build
build: context := ${orchestration_dir}/.build/context.tar
build:
	@$(call print,'${yellow}Preparing build context from${reset} ${cyan}${git_branch}:${git_version}${reset} ... ')
	@mkdir -p ${orchestration_dir}/.build ${log} || ${fail}
	@git show ${git_branch}:./Gemfile > ${orchestration_dir}/.build/Gemfile 2>${stderr} || ${fail}
	@git show ${git_branch}:./Gemfile.lock > ${orchestration_dir}/.build/Gemfile.lock 2>${stderr} || ${fail}
<% if defined?(Webpacker) %>	@git show ${git_branch}:./package.json > ${orchestration_dir}/.build/package.json 2>${stderr} || ${fail}<% end %>
<% if defined?(Webpacker) %>	@git show ${git_branch}:./yarn.lock > ${orchestration_dir}/.build/yarn.lock 2>${stderr} || ${fail}<% end %>
	@git archive --format 'tar' -o '${context}' '${git_branch}' ${log} || ${fail}
	@temp=$$(mktemp -d) ; ( cd "$${temp}" && touch './.orchestration_container_flag' && tar -uvf '${context}' . ) ${log} || ${fail}
	@$(call printrawln,'${green}complete.${reset} ${tick}')
	@$(call print,'${yellow}Building image${reset} ...')
	@docker build \
                        --build-arg BUNDLE_GITHUB__COM \
                        --build-arg BUNDLE_BITBUCKET__ORG \
                        -t ${docker_organization}/${docker_repository} \
                        -t ${docker_organization}/${docker_repository}:${git_version} \
                        ${orchestration_dir}/ ${log_progress} || ${fail}
	@$(call printrawln,' ${green}complete${reset}. ${tick}')
	@$(call println,'[${green}tag${reset}] ${cyan}${docker_organization}/${docker_repository}${reset}')
	@$(call println,'[${green}tag${reset}] ${cyan}${docker_organization}/${docker_repository}:${git_version}${reset}')

.PHONY: push
push:
	@$(call print,'${yellow}Pushing${reset} ${cyan}${docker_image}${reset} ...')
	@docker push ${docker_image} ${log_progress} || ${fail}
	@$(call printrawln,' ${green}complete${reset}. ${tick}')

### Internal Commands ###

.PHONY: _verify_compose
_verify_compose: _verify_env
	@$(call print,'${yellow}Verifying compose file(s)${reset} ... ')
	@${replace_env}
	@${compose} config ${log} || ${fail}
	@${restore_env}
	@$(call printrawln,'${green}success${reset}. ${tick}')

.PHONY: _verify_env
_verify_env:
	@if [ "${custom_env_file}" == "1" ] && [ ! -f "${env_file}" ] ; \
         then \
           $(call print,'${red}Error${reset}: Environment file "${yellow}${env_file}${reset}" not found. ${cross}') ; \
           exit 1 ; \
         fi

.PHONY: _migrate
# User must choose either `structure.sql` or `schema.rb`, or deal with
# `structure.sql` taking precedence:
ifneq (,$(wildcard db/structure.sql))
_migrate: _db_load := db:structure:load
else ifneq (,$(wildcard db/schema.rb))
_migrate: _db_load := db:schema:load
endif
_migrate:
# Allow a failure to create (DB may already exist) but fail and output full logs
# if migrations fail [as well].
	@${rake} --trace db:create ${_db_load} || :
	@${rake} --trace db:migrate
