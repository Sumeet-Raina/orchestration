### Environment setup ###

SHELL:=/bin/bash

-include .env
export

ifneq (,$(RAILS_ENV))
  env:=$(RAILS_ENV)
else ifneq (,$(RACK_ENV))
  env:=$(RACK_ENV)
else ifeq (,$(env))
  env:=development
endif

rake:=RACK_ENV=${env} RAILS_ENV=${env} bin/rake

docker_organization:=$(shell bash ./<%= env.orchestration_dir_name %>/yaml.bash docker_organization)
docker_repository:=$(shell bash ./<%= env.orchestration_dir_name %>/yaml.bash docker_repository)

compose_base:=env HOST_UID=$(shell id -u) \
              DOCKER_USERNAME=${docker_organization} \
              DOCKER_REPOSITORY=${docker_repository} \
              docker-compose \
              -p ${docker_repository} \
              -f <%= env.orchestration_dir_name %>/docker-compose.yml

git_branch:=$(if $(branch),$(branch),$(shell git rev-parse --abbrev-ref HEAD))
git_version:=$(shell git rev-parse --short --verify ${git_branch})

compose:=${compose_base} -f <%= env.orchestration_dir_name %>/docker-compose.${env}.yml -f <%= env.orchestration_dir_name %>/docker-compose.override.yml

### Container management commands ###

.PHONY: start
start:
	@echo "Starting containers..."
ifeq (${env},$(filter ${env},test development))
	@${compose} up -d
else
	@${compose} up -d --scale app=$${instances:-1}
endif
	@$(MAKE) wait

.PHONY: stop
stop:
	@echo "Stopping containers..."
	@${compose} down
	@echo "All containers stopped."

.PHONY: logs
logs:
	@${compose} logs -f

.PHONY: config
config:
	@${compose} config

.PHONY: compose
compose:
	@echo ${compose}

.PHONY: test-setup
test-setup:
	@$(MAKE) start migrate env=test

### Deployment utility commands ###

.PHONY: bundle
bundle:
	@echo 'Building deployment bundle...'
	@rm -rf <%= env.orchestration_dir_name %>/.deploy/
	@mkdir -p <%= env.orchestration_dir_name %>/.deploy/${docker_repository}/
	@sed -e "s/%%VERSION%%/${git_version}/g" \
             -e "s/%%REPOSITORY%%/${docker_repository}/g" \
             -e "s/%%ORGANIZATION%%/${docker_organization}/g" \
             <%= env.orchestration_dir_name %>/deploy.mk > \
             <%= env.orchestration_dir_name %>/.deploy/${docker_repository}/Makefile
	@cp <%= env.orchestration_dir_name %>/docker-compose.yml \
            <%= env.orchestration_dir_name %>/docker-compose.production.yml \
            <%= env.orchestration_dir_name %>/docker-compose.override.yml \
            <%= env.orchestration_dir_name %>/.deploy/${docker_repository}/
	@tar -C <%= env.orchestration_dir_name %>/.deploy -cf ./deploy.tar ./${docker_repository}
	@echo 'Deployment bundle written to ./deploy.tar'

### Database utility commands ###

.PHONY: migrate
migrate:
	@echo "Running migrations..."
ifeq (${env},$(filter ${env},test development))
	@(${rake} db:create && ${rake} db:migrate) || ${rake} db:migrate
else
	@${compose} run --rm app bin/rake db:migrate RAILS_ENV=${env}
endif
	@echo "Migrations complete."

### Service healthcheck commands ###

.PHONY: wait
wait: <%= wait_commands.join(' ') %>
	@echo "All Containers ready."

## Generic Listener healthcheck for TCP services ##

wait-listener:
	@${rake} orchestration:listener:wait service=${service}

## Test/development wait commands

.PHONY: wait-database
wait-database:
ifeq (${env},$(filter ${env},test development))
	@${rake} orchestration:database:wait
endif

.PHONY: wait-mongo
wait-mongo:
ifeq (${env},$(filter ${env},test development))
	@${rake} orchestration:mongo:wait
endif

.PHONY: wait-rabbitmq
wait-rabbitmq:
ifeq (${env},$(filter ${env},test development))
	@${rake} orchestration:rabbitmq:wait
endif

## Production wait commands

.PHONY: wait-nginx_proxy
wait-nginx_proxy:
ifneq (${env},$(filter ${env},test development))
	@${rake} orchestration:nginx_proxy:wait LISTEN_PORT=${LISTEN_PORT}
endif

.PHONY: wait-app
wait-app:
ifneq (${env},$(filter ${env},test development))
	@${rake} orchestration:app:wait LISTEN_PORT=${LISTEN_PORT}
endif

### Docker build commands ###

.PHONY: build
build:
	@echo "Preparing build from ${git_branch}"
	@mkdir -p ./<%= env.orchestration_dir_name %>/.build
	@git show ${git_branch}:./Gemfile > ./<%= env.orchestration_dir_name %>/.build/Gemfile
	@git show ${git_branch}:./Gemfile.lock > ./<%= env.orchestration_dir_name %>/.build/Gemfile.lock
<% if defined?(Webpacker) %>	@git show ${git_branch}:./package.json > ./<%= env.orchestration_dir_name %>/.build/package.json<% end %>
<% if defined?(Webpacker) %>	@git show ${git_branch}:./yarn.lock > ./<%= env.orchestration_dir_name %>/.build/yarn.lock<% end %>
	@echo "Building..."
	@git archive --format tar.gz -o ./<%= env.orchestration_dir_name %>/.build/context.tar.gz ${git_branch}
	@docker build \
	             --build-arg BUNDLE_GITHUB__COM \
	             --build-arg BUNDLE_BITBUCKET__ORG \
		     -t ${docker_organization}/${docker_repository} \
		     -t ${docker_organization}/${docker_repository}:${git_version} \
		     ./<%= env.orchestration_dir_name %>/
	@echo "Build complete."

.PHONY: push
push:
	docker push ${docker_organization}/${docker_repository}:${git_version}
